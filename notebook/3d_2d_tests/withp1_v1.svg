<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="922" onload="init(evt)" viewBox="0 0 1200 922" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="922" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o withp1_v1.svg -- python optimize.py</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="911.00"> </text><svg id="frames" x="10" width="1180" total_samples="14483"><g><title>&lt;module&gt; (optimize.py:1) (24 samples, 0.17%)</title><rect x="0.0000%" y="68" width="0.1657%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="24"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (24 samples, 0.17%)</title><rect x="0.0000%" y="84" width="0.1657%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="24"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (24 samples, 0.17%)</title><rect x="0.0000%" y="100" width="0.1657%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="24"/><text x="0.2500%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (24 samples, 0.17%)</title><rect x="0.0000%" y="116" width="0.1657%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="24"/><text x="0.2500%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (24 samples, 0.17%)</title><rect x="0.0000%" y="132" width="0.1657%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="24"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (24 samples, 0.17%)</title><rect x="0.0000%" y="148" width="0.1657%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="24"/><text x="0.2500%" y="158.50"></text></g><g><title>&lt;module&gt; (combined_with.py:4) (24 samples, 0.17%)</title><rect x="0.0000%" y="164" width="0.1657%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="24"/><text x="0.2500%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (24 samples, 0.17%)</title><rect x="0.0000%" y="180" width="0.1657%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="24"/><text x="0.2500%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (24 samples, 0.17%)</title><rect x="0.0000%" y="196" width="0.1657%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="24"/><text x="0.2500%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (24 samples, 0.17%)</title><rect x="0.0000%" y="212" width="0.1657%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="24"/><text x="0.2500%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (24 samples, 0.17%)</title><rect x="0.0000%" y="228" width="0.1657%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="24"/><text x="0.2500%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (24 samples, 0.17%)</title><rect x="0.0000%" y="244" width="0.1657%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="24"/><text x="0.2500%" y="254.50"></text></g><g><title>&lt;module&gt; (igraph/__init__.py:104) (24 samples, 0.17%)</title><rect x="0.0000%" y="260" width="0.1657%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="24"/><text x="0.2500%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (24 samples, 0.17%)</title><rect x="0.0000%" y="276" width="0.1657%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="24"/><text x="0.2500%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (24 samples, 0.17%)</title><rect x="0.0000%" y="292" width="0.1657%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="24"/><text x="0.2500%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (24 samples, 0.17%)</title><rect x="0.0000%" y="308" width="0.1657%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="24"/><text x="0.2500%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (24 samples, 0.17%)</title><rect x="0.0000%" y="324" width="0.1657%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="24"/><text x="0.2500%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (24 samples, 0.17%)</title><rect x="0.0000%" y="340" width="0.1657%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="24"/><text x="0.2500%" y="350.50"></text></g><g><title>&lt;module&gt; (igraph/community.py:2) (24 samples, 0.17%)</title><rect x="0.0000%" y="356" width="0.1657%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="24"/><text x="0.2500%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (24 samples, 0.17%)</title><rect x="0.0000%" y="372" width="0.1657%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="24"/><text x="0.2500%" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (24 samples, 0.17%)</title><rect x="0.0000%" y="388" width="0.1657%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="24"/><text x="0.2500%" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (24 samples, 0.17%)</title><rect x="0.0000%" y="404" width="0.1657%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="24"/><text x="0.2500%" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (24 samples, 0.17%)</title><rect x="0.0000%" y="420" width="0.1657%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="24"/><text x="0.2500%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (24 samples, 0.17%)</title><rect x="0.0000%" y="436" width="0.1657%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="24"/><text x="0.2500%" y="446.50"></text></g><g><title>&lt;module&gt; (igraph/clustering.py:11) (24 samples, 0.17%)</title><rect x="0.0000%" y="452" width="0.1657%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="24"/><text x="0.2500%" y="462.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (24 samples, 0.17%)</title><rect x="0.0000%" y="468" width="0.1657%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="24"/><text x="0.2500%" y="478.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:992) (24 samples, 0.17%)</title><rect x="0.0000%" y="484" width="0.1657%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="24"/><text x="0.2500%" y="494.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (24 samples, 0.17%)</title><rect x="0.0000%" y="500" width="0.1657%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="24"/><text x="0.2500%" y="510.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (24 samples, 0.17%)</title><rect x="0.0000%" y="516" width="0.1657%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="24"/><text x="0.2500%" y="526.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (24 samples, 0.17%)</title><rect x="0.0000%" y="532" width="0.1657%" height="15" fill="rgb(232,36,49)" fg:x="0" fg:w="24"/><text x="0.2500%" y="542.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (24 samples, 0.17%)</title><rect x="0.0000%" y="548" width="0.1657%" height="15" fill="rgb(209,103,24)" fg:x="0" fg:w="24"/><text x="0.2500%" y="558.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (24 samples, 0.17%)</title><rect x="0.0000%" y="564" width="0.1657%" height="15" fill="rgb(229,88,8)" fg:x="0" fg:w="24"/><text x="0.2500%" y="574.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (24 samples, 0.17%)</title><rect x="0.0000%" y="580" width="0.1657%" height="15" fill="rgb(213,181,19)" fg:x="0" fg:w="24"/><text x="0.2500%" y="590.50"></text></g><g><title>&lt;module&gt; (igraph/drawing/__init__.py:40) (24 samples, 0.17%)</title><rect x="0.0000%" y="596" width="0.1657%" height="15" fill="rgb(254,191,54)" fg:x="0" fg:w="24"/><text x="0.2500%" y="606.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (24 samples, 0.17%)</title><rect x="0.0000%" y="612" width="0.1657%" height="15" fill="rgb(241,83,37)" fg:x="0" fg:w="24"/><text x="0.2500%" y="622.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (24 samples, 0.17%)</title><rect x="0.0000%" y="628" width="0.1657%" height="15" fill="rgb(233,36,39)" fg:x="0" fg:w="24"/><text x="0.2500%" y="638.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (24 samples, 0.17%)</title><rect x="0.0000%" y="644" width="0.1657%" height="15" fill="rgb(226,3,54)" fg:x="0" fg:w="24"/><text x="0.2500%" y="654.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (24 samples, 0.17%)</title><rect x="0.0000%" y="660" width="0.1657%" height="15" fill="rgb(245,192,40)" fg:x="0" fg:w="24"/><text x="0.2500%" y="670.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (24 samples, 0.17%)</title><rect x="0.0000%" y="676" width="0.1657%" height="15" fill="rgb(238,167,29)" fg:x="0" fg:w="24"/><text x="0.2500%" y="686.50"></text></g><g><title>&lt;module&gt; (igraph/drawing/cairo/graph.py:30) (24 samples, 0.17%)</title><rect x="0.0000%" y="692" width="0.1657%" height="15" fill="rgb(232,182,51)" fg:x="0" fg:w="24"/><text x="0.2500%" y="702.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (24 samples, 0.17%)</title><rect x="0.0000%" y="708" width="0.1657%" height="15" fill="rgb(231,60,39)" fg:x="0" fg:w="24"/><text x="0.2500%" y="718.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (24 samples, 0.17%)</title><rect x="0.0000%" y="724" width="0.1657%" height="15" fill="rgb(208,69,12)" fg:x="0" fg:w="24"/><text x="0.2500%" y="734.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (24 samples, 0.17%)</title><rect x="0.0000%" y="740" width="0.1657%" height="15" fill="rgb(235,93,37)" fg:x="0" fg:w="24"/><text x="0.2500%" y="750.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (24 samples, 0.17%)</title><rect x="0.0000%" y="756" width="0.1657%" height="15" fill="rgb(213,116,39)" fg:x="0" fg:w="24"/><text x="0.2500%" y="766.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (24 samples, 0.17%)</title><rect x="0.0000%" y="772" width="0.1657%" height="15" fill="rgb(222,207,29)" fg:x="0" fg:w="24"/><text x="0.2500%" y="782.50"></text></g><g><title>&lt;module&gt; (igraph/drawing/cairo/vertex.py:9) (24 samples, 0.17%)</title><rect x="0.0000%" y="788" width="0.1657%" height="15" fill="rgb(206,96,30)" fg:x="0" fg:w="24"/><text x="0.2500%" y="798.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (24 samples, 0.17%)</title><rect x="0.0000%" y="804" width="0.1657%" height="15" fill="rgb(218,138,4)" fg:x="0" fg:w="24"/><text x="0.2500%" y="814.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (24 samples, 0.17%)</title><rect x="0.0000%" y="820" width="0.1657%" height="15" fill="rgb(250,191,14)" fg:x="0" fg:w="24"/><text x="0.2500%" y="830.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (24 samples, 0.17%)</title><rect x="0.0000%" y="836" width="0.1657%" height="15" fill="rgb(239,60,40)" fg:x="0" fg:w="24"/><text x="0.2500%" y="846.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (24 samples, 0.17%)</title><rect x="0.0000%" y="852" width="0.1657%" height="15" fill="rgb(206,27,48)" fg:x="0" fg:w="24"/><text x="0.2500%" y="862.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (24 samples, 0.17%)</title><rect x="0.0000%" y="868" width="0.1657%" height="15" fill="rgb(225,35,8)" fg:x="0" fg:w="24"/><text x="0.2500%" y="878.50"></text></g><g><title>&lt;module&gt; (igraph/drawing/shapes.py:28) (24 samples, 0.17%)</title><rect x="0.0000%" y="884" width="0.1657%" height="15" fill="rgb(250,213,24)" fg:x="0" fg:w="24"/><text x="0.2500%" y="894.50"></text></g><g><title>generateGraphAdj (combined_with.py:396) (58 samples, 0.40%)</title><rect x="0.1726%" y="100" width="0.4005%" height="15" fill="rgb(247,123,22)" fg:x="25" fg:w="58"/><text x="0.4226%" y="110.50"></text></g><g><title>_construct_graph_from_list_dict (igraph/io/objects.py:293) (17 samples, 0.12%)</title><rect x="0.5938%" y="116" width="0.1174%" height="15" fill="rgb(231,138,38)" fg:x="86" fg:w="17"/><text x="0.8438%" y="126.50"></text></g><g><title>generateGraphAdj (combined_with.py:403) (27 samples, 0.19%)</title><rect x="0.5731%" y="100" width="0.1864%" height="15" fill="rgb(231,145,46)" fg:x="83" fg:w="27"/><text x="0.8231%" y="110.50"></text></g><g><title>filterGraph_blue_red (combined_with.py:352) (17 samples, 0.12%)</title><rect x="0.7940%" y="116" width="0.1174%" height="15" fill="rgb(251,118,11)" fg:x="115" fg:w="17"/><text x="1.0440%" y="126.50"></text></g><g><title>filterGraph_blue_red (combined_with.py:363) (80 samples, 0.55%)</title><rect x="0.9459%" y="116" width="0.5524%" height="15" fill="rgb(217,147,25)" fg:x="137" fg:w="80"/><text x="1.1959%" y="126.50"></text></g><g><title>filterGraph_blue_red (combined_with.py:366) (65 samples, 0.45%)</title><rect x="1.5052%" y="116" width="0.4488%" height="15" fill="rgb(247,81,37)" fg:x="218" fg:w="65"/><text x="1.7552%" y="126.50"></text></g><g><title>filterGraph_blue_red (combined_with.py:367) (65 samples, 0.45%)</title><rect x="1.9540%" y="116" width="0.4488%" height="15" fill="rgb(209,12,38)" fg:x="283" fg:w="65"/><text x="2.2040%" y="126.50"></text></g><g><title>filterGraph_blue_red (combined_with.py:369) (98 samples, 0.68%)</title><rect x="2.4028%" y="116" width="0.6767%" height="15" fill="rgb(227,1,9)" fg:x="348" fg:w="98"/><text x="2.6528%" y="126.50"></text></g><g><title>filterGraph_blue_red (combined_with.py:372) (97 samples, 0.67%)</title><rect x="3.0795%" y="116" width="0.6698%" height="15" fill="rgb(248,47,43)" fg:x="446" fg:w="97"/><text x="3.3295%" y="126.50"></text></g><g><title>filterGraph_blue_red (combined_with.py:376) (19 samples, 0.13%)</title><rect x="3.7492%" y="116" width="0.1312%" height="15" fill="rgb(221,10,30)" fg:x="543" fg:w="19"/><text x="3.9992%" y="126.50"></text></g><g><title>generateGraphAdj (combined_with.py:408) (467 samples, 3.22%)</title><rect x="0.7733%" y="100" width="3.2245%" height="15" fill="rgb(210,229,1)" fg:x="112" fg:w="467"/><text x="1.0233%" y="110.50">gen..</text></g><g><title>filterGraph_blue_red (combined_with.py:379) (17 samples, 0.12%)</title><rect x="3.8804%" y="116" width="0.1174%" height="15" fill="rgb(222,148,37)" fg:x="562" fg:w="17"/><text x="4.1304%" y="126.50"></text></g><g><title>generateGraphAdj (combined_with.py:419) (449 samples, 3.10%)</title><rect x="4.0806%" y="100" width="3.1002%" height="15" fill="rgb(234,67,33)" fg:x="591" fg:w="449"/><text x="4.3306%" y="110.50">gen..</text></g><g><title>_add_edge (igraph/basic.py:24) (449 samples, 3.10%)</title><rect x="4.0806%" y="116" width="3.1002%" height="15" fill="rgb(247,98,35)" fg:x="591" fg:w="449"/><text x="4.3306%" y="126.50">_ad..</text></g><g><title>_add_edges (igraph/basic.py:42) (449 samples, 3.10%)</title><rect x="4.0806%" y="132" width="3.1002%" height="15" fill="rgb(247,138,52)" fg:x="591" fg:w="449"/><text x="4.3306%" y="142.50">_ad..</text></g><g><title>_add_edges (igraph/basic.py:42) (443 samples, 3.06%)</title><rect x="7.1808%" y="132" width="3.0588%" height="15" fill="rgb(213,79,30)" fg:x="1040" fg:w="443"/><text x="7.4308%" y="142.50">_ad..</text></g><g><title>_add_edge (igraph/basic.py:24) (444 samples, 3.07%)</title><rect x="7.1808%" y="116" width="3.0657%" height="15" fill="rgb(246,177,23)" fg:x="1040" fg:w="444"/><text x="7.4308%" y="126.50">_ad..</text></g><g><title>generateGraphAdj (combined_with.py:425) (446 samples, 3.08%)</title><rect x="7.1808%" y="100" width="3.0795%" height="15" fill="rgb(230,62,27)" fg:x="1040" fg:w="446"/><text x="7.4308%" y="110.50">gen..</text></g><g><title>_add_edges (igraph/basic.py:42) (407 samples, 2.81%)</title><rect x="10.2603%" y="132" width="2.8102%" height="15" fill="rgb(216,154,8)" fg:x="1486" fg:w="407"/><text x="10.5103%" y="142.50">_a..</text></g><g><title>_add_edge (igraph/basic.py:24) (408 samples, 2.82%)</title><rect x="10.2603%" y="116" width="2.8171%" height="15" fill="rgb(244,35,45)" fg:x="1486" fg:w="408"/><text x="10.5103%" y="126.50">_a..</text></g><g><title>generateGraphAdj (combined_with.py:430) (409 samples, 2.82%)</title><rect x="10.2603%" y="100" width="2.8240%" height="15" fill="rgb(251,115,12)" fg:x="1486" fg:w="409"/><text x="10.5103%" y="110.50">ge..</text></g><g><title>generateGraphAdj (combined_with.py:462) (40 samples, 0.28%)</title><rect x="13.0912%" y="100" width="0.2762%" height="15" fill="rgb(240,54,50)" fg:x="1896" fg:w="40"/><text x="13.3412%" y="110.50"></text></g><g><title>generateGraphAdj (combined_with.py:466) (63 samples, 0.43%)</title><rect x="13.4019%" y="100" width="0.4350%" height="15" fill="rgb(233,84,52)" fg:x="1941" fg:w="63"/><text x="13.6519%" y="110.50"></text></g><g><title>generateGraphAdj (combined_with.py:467) (44 samples, 0.30%)</title><rect x="13.8369%" y="100" width="0.3038%" height="15" fill="rgb(207,117,47)" fg:x="2004" fg:w="44"/><text x="14.0869%" y="110.50"></text></g><g><title>_add_edges (igraph/basic.py:42) (3,385 samples, 23.37%)</title><rect x="14.2926%" y="132" width="23.3722%" height="15" fill="rgb(249,43,39)" fg:x="2070" fg:w="3385"/><text x="14.5426%" y="142.50">_add_edges (igraph/basic.py:42)</text></g><g><title>_add_edge (igraph/basic.py:24) (3,387 samples, 23.39%)</title><rect x="14.2857%" y="116" width="23.3860%" height="15" fill="rgb(209,38,44)" fg:x="2069" fg:w="3387"/><text x="14.5357%" y="126.50">_add_edge (igraph/basic.py:24)</text></g><g><title>generateGraphAdj (combined_with.py:519) (3,397 samples, 23.46%)</title><rect x="14.2857%" y="100" width="23.4551%" height="15" fill="rgb(236,212,23)" fg:x="2069" fg:w="3397"/><text x="14.5357%" y="110.50">generateGraphAdj (combined_with.py:51..</text></g><g><title>_add_edges (igraph/basic.py:42) (7,145 samples, 49.33%)</title><rect x="37.8651%" y="132" width="49.3337%" height="15" fill="rgb(242,79,21)" fg:x="5484" fg:w="7145"/><text x="38.1151%" y="142.50">_add_edges (igraph/basic.py:42)</text></g><g><title>_add_edge (igraph/basic.py:24) (7,153 samples, 49.39%)</title><rect x="37.8444%" y="116" width="49.3889%" height="15" fill="rgb(211,96,35)" fg:x="5481" fg:w="7153"/><text x="38.0944%" y="126.50">_add_edge (igraph/basic.py:24)</text></g><g><title>generateGraphAdj (combined_with.py:538) (7,172 samples, 49.52%)</title><rect x="37.8237%" y="100" width="49.5201%" height="15" fill="rgb(253,215,40)" fg:x="5478" fg:w="7172"/><text x="38.0737%" y="110.50">generateGraphAdj (combined_with.py:538)</text></g><g><title>&lt;module&gt; (optimize.py:19) (12,632 samples, 87.22%)</title><rect x="0.1657%" y="68" width="87.2195%" height="15" fill="rgb(211,81,21)" fg:x="24" fg:w="12632"/><text x="0.4157%" y="78.50">&lt;module&gt; (optimize.py:19)</text></g><g><title>generateGraph (combined_with.py:583) (12,632 samples, 87.22%)</title><rect x="0.1657%" y="84" width="87.2195%" height="15" fill="rgb(208,190,38)" fg:x="24" fg:w="12632"/><text x="0.4157%" y="94.50">generateGraph (combined_with.py:583)</text></g><g><title>connectedComponents (igraph_testing.py:380) (51 samples, 0.35%)</title><rect x="88.0204%" y="116" width="0.3521%" height="15" fill="rgb(235,213,38)" fg:x="12748" fg:w="51"/><text x="88.2704%" y="126.50"></text></g><g><title>filterGraph (igraph_testing.py:352) (51 samples, 0.35%)</title><rect x="88.4554%" y="132" width="0.3521%" height="15" fill="rgb(237,122,38)" fg:x="12811" fg:w="51"/><text x="88.7054%" y="142.50"></text></g><g><title>filterGraph (igraph_testing.py:358) (245 samples, 1.69%)</title><rect x="88.8283%" y="132" width="1.6916%" height="15" fill="rgb(244,218,35)" fg:x="12865" fg:w="245"/><text x="89.0783%" y="142.50"></text></g><g><title>vs (igraph/__init__.py:588) (24 samples, 0.17%)</title><rect x="90.3542%" y="148" width="0.1657%" height="15" fill="rgb(240,68,47)" fg:x="13086" fg:w="24"/><text x="90.6042%" y="158.50"></text></g><g><title>connectedComponents (igraph_testing.py:381) (324 samples, 2.24%)</title><rect x="88.3726%" y="116" width="2.2371%" height="15" fill="rgb(210,16,53)" fg:x="12799" fg:w="324"/><text x="88.6226%" y="126.50">c..</text></g><g><title>CC_descriptors (new_descriptors.py:25) (481 samples, 3.32%)</title><rect x="87.3990%" y="100" width="3.3211%" height="15" fill="rgb(235,124,12)" fg:x="12658" fg:w="481"/><text x="87.6490%" y="110.50">CC_..</text></g><g><title>CC_descriptors (new_descriptors.py:45) (15 samples, 0.10%)</title><rect x="90.7271%" y="100" width="0.1036%" height="15" fill="rgb(224,169,11)" fg:x="13140" fg:w="15"/><text x="90.9771%" y="110.50"></text></g><g><title>descriptors (new_descriptors.py:268) (505 samples, 3.49%)</title><rect x="87.3852%" y="84" width="3.4868%" height="15" fill="rgb(250,166,2)" fg:x="12656" fg:w="505"/><text x="87.6352%" y="94.50">des..</text></g><g><title>filterGraph_metavertices (new_descriptors.py:139) (16 samples, 0.11%)</title><rect x="91.1551%" y="116" width="0.1105%" height="15" fill="rgb(242,216,29)" fg:x="13202" fg:w="16"/><text x="91.4051%" y="126.50"></text></g><g><title>filterGraph_metavertices (new_descriptors.py:72) (40 samples, 0.28%)</title><rect x="91.4106%" y="116" width="0.2762%" height="15" fill="rgb(230,116,27)" fg:x="13239" fg:w="40"/><text x="91.6606%" y="126.50"></text></g><g><title>filterGraph_metavertices (new_descriptors.py:97) (151 samples, 1.04%)</title><rect x="91.7006%" y="116" width="1.0426%" height="15" fill="rgb(228,99,48)" fg:x="13281" fg:w="151"/><text x="91.9506%" y="126.50"></text></g><g><title>filterGraph_metavertices (new_descriptors.py:98) (117 samples, 0.81%)</title><rect x="92.7432%" y="116" width="0.8078%" height="15" fill="rgb(253,11,6)" fg:x="13432" fg:w="117"/><text x="92.9932%" y="126.50"></text></g><g><title>shortest_path_descriptors (new_descriptors.py:160) (526 samples, 3.63%)</title><rect x="90.8859%" y="100" width="3.6318%" height="15" fill="rgb(247,143,39)" fg:x="13163" fg:w="526"/><text x="91.1359%" y="110.50">shor..</text></g><g><title>filterGraph_metavertices (new_descriptors.py:99) (140 samples, 0.97%)</title><rect x="93.5511%" y="116" width="0.9667%" height="15" fill="rgb(236,97,10)" fg:x="13549" fg:w="140"/><text x="93.8011%" y="126.50"></text></g><g><title>shortest_path_descriptors (new_descriptors.py:166) (17 samples, 0.12%)</title><rect x="94.5799%" y="100" width="0.1174%" height="15" fill="rgb(233,208,19)" fg:x="13698" fg:w="17"/><text x="94.8299%" y="110.50"></text></g><g><title>_shortest_paths (igraph/structural.py:89) (17 samples, 0.12%)</title><rect x="94.5799%" y="116" width="0.1174%" height="15" fill="rgb(216,164,2)" fg:x="13698" fg:w="17"/><text x="94.8299%" y="126.50"></text></g><g><title>shortest_path_descriptors (new_descriptors.py:169) (15 samples, 0.10%)</title><rect x="94.7387%" y="100" width="0.1036%" height="15" fill="rgb(220,129,5)" fg:x="13721" fg:w="15"/><text x="94.9887%" y="110.50"></text></g><g><title>shortest_path_descriptors (new_descriptors.py:190) (23 samples, 0.16%)</title><rect x="94.8491%" y="100" width="0.1588%" height="15" fill="rgb(242,17,10)" fg:x="13737" fg:w="23"/><text x="95.0991%" y="110.50"></text></g><g><title>shortest_path_descriptors (new_descriptors.py:194) (18 samples, 0.12%)</title><rect x="95.0701%" y="100" width="0.1243%" height="15" fill="rgb(242,107,0)" fg:x="13769" fg:w="18"/><text x="95.3201%" y="110.50"></text></g><g><title>shortest_path_descriptors (new_descriptors.py:209) (104 samples, 0.72%)</title><rect x="95.3186%" y="100" width="0.7181%" height="15" fill="rgb(251,28,31)" fg:x="13805" fg:w="104"/><text x="95.5686%" y="110.50"></text></g><g><title>shortest_path_descriptors (new_descriptors.py:210) (16 samples, 0.11%)</title><rect x="96.0367%" y="100" width="0.1105%" height="15" fill="rgb(233,223,10)" fg:x="13909" fg:w="16"/><text x="96.2867%" y="110.50"></text></g><g><title>shortest_path_descriptors (new_descriptors.py:211) (35 samples, 0.24%)</title><rect x="96.1472%" y="100" width="0.2417%" height="15" fill="rgb(215,21,27)" fg:x="13925" fg:w="35"/><text x="96.3972%" y="110.50"></text></g><g><title>shortest_path_descriptors (new_descriptors.py:213) (88 samples, 0.61%)</title><rect x="96.3889%" y="100" width="0.6076%" height="15" fill="rgb(232,23,21)" fg:x="13960" fg:w="88"/><text x="96.6389%" y="110.50"></text></g><g><title>shortest_path_descriptors (new_descriptors.py:215) (30 samples, 0.21%)</title><rect x="97.0310%" y="100" width="0.2071%" height="15" fill="rgb(244,5,23)" fg:x="14053" fg:w="30"/><text x="97.2810%" y="110.50"></text></g><g><title>shortest_path_descriptors (new_descriptors.py:226) (86 samples, 0.59%)</title><rect x="97.2450%" y="100" width="0.5938%" height="15" fill="rgb(226,81,46)" fg:x="14084" fg:w="86"/><text x="97.4950%" y="110.50"></text></g><g><title>shortest_path_descriptors (new_descriptors.py:228) (32 samples, 0.22%)</title><rect x="97.9217%" y="100" width="0.2209%" height="15" fill="rgb(247,70,30)" fg:x="14182" fg:w="32"/><text x="98.1717%" y="110.50"></text></g><g><title>shortest_path_descriptors (new_descriptors.py:234) (82 samples, 0.57%)</title><rect x="98.1427%" y="100" width="0.5662%" height="15" fill="rgb(212,68,19)" fg:x="14214" fg:w="82"/><text x="98.3927%" y="110.50"></text></g><g><title>shortest_path_descriptors (new_descriptors.py:236) (34 samples, 0.23%)</title><rect x="98.8055%" y="100" width="0.2348%" height="15" fill="rgb(240,187,13)" fg:x="14310" fg:w="34"/><text x="99.0555%" y="110.50"></text></g><g><title>shortest_path_descriptors (new_descriptors.py:238) (76 samples, 0.52%)</title><rect x="99.0403%" y="100" width="0.5248%" height="15" fill="rgb(223,113,26)" fg:x="14344" fg:w="76"/><text x="99.2903%" y="110.50"></text></g><g><title>shortest_path_descriptors (new_descriptors.py:239) (30 samples, 0.21%)</title><rect x="99.5650%" y="100" width="0.2071%" height="15" fill="rgb(206,192,2)" fg:x="14420" fg:w="30"/><text x="99.8150%" y="110.50"></text></g><g><title>all (14,483 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="14483"/><text x="0.2500%" y="62.50"></text></g><g><title>&lt;module&gt; (optimize.py:21) (1,827 samples, 12.61%)</title><rect x="87.3852%" y="68" width="12.6148%" height="15" fill="rgb(247,173,49)" fg:x="12656" fg:w="1827"/><text x="87.6352%" y="78.50">&lt;module&gt; (optimize...</text></g><g><title>descriptors (new_descriptors.py:272) (1,322 samples, 9.13%)</title><rect x="90.8721%" y="84" width="9.1279%" height="15" fill="rgb(224,114,35)" fg:x="13161" fg:w="1322"/><text x="91.1221%" y="94.50">descriptors (..</text></g><g><title>shortest_path_descriptors (new_descriptors.py:240) (33 samples, 0.23%)</title><rect x="99.7721%" y="100" width="0.2279%" height="15" fill="rgb(245,159,27)" fg:x="14450" fg:w="33"/><text x="100.0221%" y="110.50"></text></g></svg></svg>