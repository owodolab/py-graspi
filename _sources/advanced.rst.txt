.. _advanced:

==============================================
Advanced
==============================================
The Py-GraSPI package also offers advanced functionality for developers and users with advanced
technical skills.

Running Memory Tests
====================

To run memory tests, run the following command in the terminal:

.. code-block:: bash

    python main.py n dimension function

**Make sure of the following:**

* Replace "n" with the size of the graph you want. **Note:** n should be between 1-1000 for 2D graphs and 1-100 for 3D graphs. Otherwise, the code will timeout.
* Replace "dimension" with 2D or 3D specify if you want a 2D or 3D graph.
* Replace "function" with either generage, filter, or shortest_path to choose which function you want to test memory for.

Example:

.. code-block:: bash

    python main.py 10 2D generate

Testing Algorithms
==================

To **generate graphs**, call the generateGraph(file) function which takes in an input-file name

- Returns a graph (graph_data_class object)
    - g: graph object
    - s_2D: bool of whether the graph is 2D
    - black_vertices: list of all black vertices
    - white_vertices: list of all white vertices
    - black_green: number of edges from black to interface (green vertex)
    - black_interface_red: number of black interface vertices that has a path to top (red)
    - white_interface_blue: number of white interface vertices that has a path to bottom (blue)
    - dim: value of vertices in y direction for 2D and z direction for 3D
    - interface_edge_comp_paths: number of interface edges with complementary paths to top (red) and bottom (blue)
    - shortest_path_to_red: shortest paths from all vertices to red
    - shortest_path_to_blue: shortest paths from all vertices to blue
    - CT_n_D_adj_An: number of black vertices in direct contact with top (red)
    - CT_n_A_adj_Ca: number of white vertices in direct contact with bottom (blue)

.. code-block:: bash

    ig.generateGraph("2D-testFile/testFile-10-2D.txt")   # utilizing the test file found in 2D-testFiles folder as an example

To **filter graphs**, call filterGraph(graph) function which takes in a graph object

- Can pass a graph generated by generateGraph(file)
- Returns a filtered graph

.. code-block:: bash

    g = ig.generateGraph("2D-testFile/testFile-10-2D.txt")     # utilizing the test file found in 2D-testFiles folder as an example
    fg = ig.filterGraph(g)

- The connected components is the result produced by the connected_components function:

.. code-block:: bash

    print(f"Number of Connected Components: {len(fg.connected_components())}")
    print(f"Connected Components: {fg.connected_components()}")

To get a **dictionary of descriptors**, call the descriptors(graph_data, filename) function
It takes in the graph_data_class object returned from generateGraph() and an input filename as the parameters.

.. code-block:: python

    dict = ig.descriptors(graph_data,filename)
    ig.descriptorsToTxt(dict,"descriptors_list.txt")

To test if descriptors are computed correctly, you can run the following script in the terminal to check.
- Make sure you are in the py-graspi directory after git cloning
- Then run the command

.. code-block:: bash

    cd tests
    python descriptor_testing.py ../data/data/data_0.5_2.2_001900.txt

Translating .plt files to .txt files
========================================

Translate Image File Into Truncated .txt File
==========================================================

2D & 3D Morphologies Tests
========================================

Running All 33 Morphologies Tests
=========================================

33 Morphologies Output
==========================

Tortuosity HeatMap Visualization
=======================================

Jupyter NoteBook to Visualize HeatMap
=========================================

Mycelium Filtered Vertices Visualization
=========================================

Mycelium Filtered Vertices Interactivity
=========================================

Generate and Run Files for Py-Graspi API
==================

In order to generate an API using sphinx, you need to follow the installation of py-graspi:

Install ghp-import in the project root directory:

.. code-block:: bash

   pip install ghp-import

To generate the rst files into the local html, run this command:

.. code-block:: bash

   sphinx-build -b html docs/source docs/build

Ensure that the files have been generated in docs/build.

To push the changes reflected on the html to the gh-pages branch on GitHub, essentially pushing changes to the site, run this command:

.. code-block:: bash

   ghp-import -n -p -f docs/build/

Go to the GitHub repo and verify that the files were pushed to the gh-pages branch

Access and verify the documentation through the following URL: https://owodolab.github.io/py-graspi/.

Update Py-pi Package
====================

If there are changes made to the to the PyGraspi package locally, these instructions can help push to Py-Pi.

1. To install setuptools, wheel and twine, run this command in terminal:

.. code-block:: bash

   pip install setuptools wheel twine

Ensure that the project already contains setup.py, README.md, _init_.py, LICENSE and other core files.

If the current package was never pushed to PyPI, continue to step 2. If the package has already been pushed before, make sure you update the version number in the setup.py file.

2. Build the distribution files, which creates a dist/ directory containing the .tar.gz and .whl files.

First, CD into project root directory. Then, run this command in terminal:

.. code-block:: bash

   python setup.py sdist bdist_wheel

(Optional) It's safe to delete the .tar.gz and .whl file of old versions so that the correct version gets pushed to PyPI

3. Login to PyPI, and in settings

4. Use twine to upload the distribution securely by running this command in terminal:

.. code-block:: bash

   twine upload dist/*

When prompted for your API token, retrieve the API token that you can generate from PyPI. The token will not be visible on the terminal, so press enter after entering the token.

Verify that the new version has been uploaded successfully at the link https://pypi.org/project/py-graspi/