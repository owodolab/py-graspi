.. _advanced:

==============================================
Advanced
==============================================
The Py-GraSPI package also offers advanced functionality for developers and users with advanced
technical skills.

Running Memory Tests
====================

To run memory tests, run the following command in the terminal:

.. code-block:: bash

    python main.py n dimension function

**Make sure of the following:**

* Replace "n" with the size of the graph you want. **Note:** n should be between 1-1000 for 2D graphs and 1-100 for 3D graphs. Otherwise, the code will timeout.
* Replace "dimension" with 2D or 3D specify if you want a 2D or 3D graph.
* Replace "function" with either generage, filter, or shortest_path to choose which function you want to test memory for.

Example:

.. code-block:: bash

    python main.py 10 2D generate

Testing Algorithms
==================

To **generate graphs**, call the generateGraph(file) function which takes in an input-file name

- Returns a graph

.. code-block:: bash

    ig.generateGraph("2D-testFile/testFile-10-2D.txt")   # utilizing the test file found in 2D-testFiles folder as an example

To **filter graphs**, call filterGraph(graph) function which takes in a graph object

- Can pass a graph generated by generateGraph(file)
- Returns a filtered graph

.. code-block:: bash

    g = ig.generateGraph("2D-testFile/testFile-10-2D.txt")     # utilizing the test file found in 2D-testFiles folder as an example
    fg = ig.filterGraph(g)

The number of connected components can be found by taking the length of the result produced by the connected_components function:

.. code-block:: bash

    print(fg.connected_components())

The number of connected components can be found by taking the length of the result produced by the connected_components function

.. code-block:: bash

    print(len(fg.connected_components()))

The shortest path between some meta-vertices to all specified vertices calling the function shortest_path(fiteredGraph, specifiedVertices, metaVertex, fileName)

- stores the distance of the paths to from the metaVertex to every single specified Vertices in a text file called fileName

Example:

the example below finds the shortest path between all black vertices to the blue meta-vertex and stores it in the text file, black_to_blue_paths.txt

.. code-block:: bash

    ig.shortest_path(fg,'black','blue',"black_to_blue_paths.txt")    #fg is a filtered graph object
